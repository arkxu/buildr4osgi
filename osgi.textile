---
layout: default
title: OSGi capabilities
---

h1. Something new for your buildfile

You can access the OSGi functionalities in the buildfile.

h2. The <code>dependencies</code> function

You can access the project dependencies by calling the <code>dependencies</code> function while defining the project:

{% highlight ruby %}
define("foo") do
  compile.with dependencies
end
{% endhighlight %}

You can also access other project dependencies:

{% highlight ruby %}
define("bar") do
  compile.with project("foo").dependencies
end
{% endhighlight %}

h2. The <code>library_project</code> function

The <code>library_project</code> function will generate a library project for you.

{% highlight ruby %}
library_project(dependencies, group, id, version, options = {})
{% endhighlight %}

For example:
{% highlight ruby %}
library_project(SLF4J, "com.example", "myLibs", "1.0.0")
{% endhighlight %}

The project will package by unjarring each library and merge with them, creating the appropriate manifest at the same time.

You can set specific rules for inclusion or exclusion of the files in the jar:

This will exclude nothing:
{% highlight ruby %}
library_project(SLF4J, "com.example", "myLibs", "1.0.0", :exclude => "")
{% endhighlight %}

This will only include the jsp and html files:
{% highlight ruby %}
library_project(SLF4J, "com.example", "myLibs", "1.0.0", :include => ["*.jsp", "*.html"])
{% endhighlight %}

Library projects package your libraries as jars, and their sources (if present) are bundled into zips as well.

