---
layout: default
title: In the buildfile
---

h1. What's new in the buildfile ?

You can access the OSGi functionalities in the buildfile.

h2. The <code>dependencies</code> function

You can access the project dependencies by calling the <code>dependencies</code> function while defining the project:

<pre><code>define("foo") do
  compile.with dependencies
end
</pre></code>

You can also access other project dependencies:

<pre><code>define("bar") do
  compile.with project("foo").dependencies
end
</pre></code>

h2. The <code>library_project</code> function

The <code>library_project</code> function will generate a library project for you.

<code>library_project(dependencies, group, id, version, options = {})</code>

For example:
<pre><code>library_project(SLF4J, "com.example", "myLibs", "1.0.0")</code></pre>

The project will package by unjarring each library and merge with them, creating the appropriate manifest at the same time.

By default, the META-INF folder of the jars is ignored, but you can set specific rules:

This will exclude nothing:
<pre><code>library_project(SLF4J, "com.example", "myLibs", "1.0.0", 
	:exclude => "")</code></pre>

This will only include the jsp and html files:
<pre><code>library_project(SLF4J, "com.example", "myLibs", "1.0.0", 
	:include => ["*.jsp", "*.html"])</code></pre>

Library projects package your libraries as jars, and their sources (if present) are bundled into zips as well.

