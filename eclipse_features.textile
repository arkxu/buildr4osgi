---
layout: default
title: In the buildfile
---

h1. Build your Eclipse features

Eclipse features are a way of packaging plugins together to distribute them.

In Buildr4OSGi, you can package a project as a feature by calling <code>package(:feature)</code>.

It will create a feature with a jar extension and a feature Maven classifier, ie your jar will look like this:
<code>{project.id}-{project.version}-feature.jar</code>

The feature files are usually located in <code>eclipse/features/{project.id}-{project.version}.jar</code> inside that archive.

The feature files will be decoupled into 2 files:
* feature.xml is the file that contains all elements and defines the feature

* feature.properties is the file that contains the externalized strings of feature.xml.

h2. Feature information

You need to provide more information for the feature to generate correctly:

|_. Name|_. Description|_. Optional|_. i18n|
|label|The label of the feature|no|yes|
|copyright|The copyright mention for the feature|no|no|
|provider|The name of the provider for the feature, the company or the organization sponsoring it|no|yes|
|description|The description of the feature. This is where you sell your code|no|yes|
|changesURL|The URL of the changes to the feature, a release notes page|no|yes|
|license|the text of the license|no|yes|
|licenseURL|the url of the license|no|yes|
|branding_plugin|The id of the plugin used for branding|yes|no|

h2. Update and discovery sites

you can _optionally_ provide the update sites for which the feature is registered. 
They will be made available to the user so that he can update the feature in the future.
Update and discovery site names are placed in feature.properties so that they may be translated.

The update site is defined as a hash with both a name and a URL.

{% highlight ruby %}
package(:feature).update_sites << {:url => "http://example.com/update", :name => "My update site"}
{% endhighlight %}

Same goes for discovery sites (which are used to add themselves to the update sites available so the user can discover more features, some might be needed for this feature):

{% highlight ruby %}
package(:feature).discovery_sites << {:url => "http://example.com/discovery", :name => "My discovery site"}
{% endhighlight %}

h2. Plugins

Plugins are required (otherwise your feature contains nothing really). A feature packages plugins like this:

* Artifacts
{% highlight ruby %}
package(:feature).plugins << "eclipse:org.eclipse.smthg:jar:1.0.0"
{% endhighlight %}

* Projects
{% highlight ruby %}
package(:feature).plugins << project("my.project")
{% endhighlight %}

h2. Example

This is how we package the BPMN modeler as a feature. 
Note the use of the tap method to isolate the code for the feature.

{% highlight ruby %}

define 'org.eclipse.stp.bpmn.feature' do
  package(:feature).tap {|f|
    f.label = "BPMN modeler feature"
    f.provider = "Eclipse.org"
    f.description = "The BPMN Modeler is a business process diagram editor for business analysts."
    f.changesURL = "http://www.eclipse.org/bpmn/"
    f.license = File.read("epl-v10.html")
    f.licenseURL = "http://www.eclipse.org/legal/epl-v10.html"
    f.update_sites << {:url => "http://example.com/update", :name => "My update site"}
    f.discovery_sites = [{:url => "http://example.com/update2", :name => "My update site2"}, 
      {:url => "http://example.com/upup", :name => "My update site in case"}]
    f.plugins = [project('org.eclipse.stp.bpmn'), project('org.eclipse.stp.bpmn.diagram'), 
      project('org.eclipse.stp.bpmn.edit'), project('org.eclipse.stp.bpmn.validation')]
  }
end
{% endhighlight %}
